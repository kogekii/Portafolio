---
interface Props {
	title: string;
	body: string;
	image: string;
	href: string;
	state: string;
	tecnologias: string[];
}
const { href, title, body, state, tecnologias, image } = Astro.props;

function getTechBadge(tecnologia: string) {
	const techBadgeMap: { [key: string]: string } = {
		"react": "React-61DAFB?style=for-the-badge&logo=react&logoColor=white",
		"next": "Next-black?style=for-the-badge&logo=next.js&logoColor=white",
		"ruby": "Ruby-CC342D?style=for-the-badge&logo=ruby&logoColor=white",
		"rails": "Rails-CC0000?style=for-the-badge&logo=ruby-on-rails&logoColor=white",
		"postgres": "PostgreSQL-336791?style=for-the-badge&logo=postgresql&logoColor=white",
		"node": "Node.js-339933?style=for-the-badge&logo=node.js&logoColor=white",
		"vue": "Vue.js-4FC08D?style=for-the-badge&logo=vue.js&logoColor=white",
		"astro": "Astro-000000?style=for-the-badge&logo=astro&logoColor=white",
		"docker": "Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white",
		"tailwind": "Tailwind CSS-38B2AC?style=for-the-badge&logo=tailwind-css&logoColor=white",
	};

	return techBadgeMap[tecnologia] || "";
}

---

<li class="link-card">
	<a href={href}>
		<div class="state">
			{state}
		</div>
		<div class="grid">
			<div class="image">
				<!-- imagen de 100x100 pixeles -->
				<img src={image} alt="rubricflow" width="100" height="100" />
			</div>
			<div>
				<h2>
					{title}
				</h2>
				<div>
					{tecnologias.map((tecnologia) => {
						const badge = getTechBadge(tecnologia);
						return (
							<img
								src={`https://img.shields.io/badge/${badge}`}
								alt={tecnologia}
							/>
						);
					})}
				</div>
				<p>
					{body}
				</p>
			</div>

		</div>
		
	
	</a>
</li>
<style>
	.link-card {
		position: relative;
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	.link-card > a {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	p {
		margin-top: 0.5rem;
		margin-bottom: 0;
	}
	.link-card:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	.link-card:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
	/* etiqueta state se muestra en la parte superior derecha de la card*/
	.state {
		position: absolute;
		top: 0;
		right: 0;
		padding: 0.5rem 0.75rem;
		font-size: 0.75rem;
		font-weight: 700;
		background-color: var(--accent);
		color: white;
		border-radius: 0 0 0 8px;
	}
	/* grid para la imagen y el contenido */
	.grid {
		display: grid;
		grid-template-columns: 100px 1fr;
		gap: 1rem;
	}
</style>
